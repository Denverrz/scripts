local KrakenLib = {}

local headOffset = Vector3.new(0, 0.5, 0)
local legOffset = Vector3.new(0, 3, 0)
local TracerStart = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
local rmvtb = table.remove

function KrakenLib.new(data)
    local mt =
        setmetatable(
        {
            plr = data.plr,
            char = data.plr.Character,
            boxEsp = nil,
            name = nil,
            Tracer = nil,
            espColor = data.espColor or fromRGB(255, 255, 255),
            teamCheck = data.teamCheck or false
        },
        {__index = KrakenLib}
    )

    local plr = data.plr
    local char = mt.char
    local boxEspVisible = data.boxEspVisible
    local TracerVisible = data.TracerVisible
    local text = data.text

    if not char then
        return
    end

    local hrp = char.HumanoidRootPart
    local head = char.Head
    local hrpPos, hrpVis = workspace.CurrentCamera.WorldToViewportPoint(workspace.CurrentCamera, hrp.Position)
    local headPos = workspace.CurrentCamera.WorldToViewportPoint(workspace.CurrentCamera, head.Position + headOffset)
    local legPos = workspace.CurrentCamera.WorldToViewportPoint(workspace.CurrentCamera, hrp.Position - legOffset)
    local Vis =
        (mt.teamCheck and plr.TeamColor ~= game:GetService("Players").LocalPlayer.TeamColor) or (not mt.teamCheck)

    local boxEsp = Drawing.new("Square")
    boxEsp.Color = mt.espColor
    boxEsp.Thickness = 4
    boxEsp.Filled = false
    boxEsp.Transparency = 0.8
    local Tracer = Drawing.new("Line")
    Tracer.From = TracerStart
    Tracer.Color = mt.espColor
    Tracer.Thickness = 4
    Tracer.Transparency = 0.8
    local name = Drawing.new("Text")
    name.Text = text
    name.Size = 16
    name.Color = mt.espColor
    name.Center = true
    name.Outline = true

    if hrpVis then
        boxEsp.Size = Vector2.new(2350 / hrpPos.Z, headPos.Y - legPos.Y)
        boxEsp.Position = Vector2.new(hrpPos.X - boxEsp.Size.X / 2, hrpPos.Y - boxEsp.Size.Y / 2)
        Tracer.To = Vector2.new(hrpPos.X, hrpPos.Y - boxEsp.Size.Y / 2)
        name.Position = Vector2.new(hrpPos.X, (hrpPos.Y + boxEsp.Size.Y / 2) - 25)

        boxEsp.Visible = boxEspVisible and Vis
        Tracer.Visible = TracerVisible and Vis
        name.Visible = Vis
    end

    mt.boxEsp = {boxEsp, boxEspVisible}
    mt.Tracer = {Tracer, TracerVisible}
    mt.name = {name, text}

    return mt
end

function KrakenLib:setboxEsp(Vis)
    mt.boxEsp[2] = Vis
end

function KrakenLib:setTracer(Vis)
    mt.Tracer[2] = Vis
end

function KrakenLib:setText(text)
    mt.name[2] = text
end

function KrakenLib:upd()
    local plr, char, boxEsp, Tracer, name = mt.plr, mt.char, mt.boxEsp[1], mt.Tracer[1], mt.name[1]
    local boxEspVisible, TracerVisible, text, espColor = mt.boxEsp[2], mt.Tracer[2], mt.name[2], mt.espColor
    local hrp, head = char:FindFirstChild("HumanoidRootPart"), char:FindFirstChild("Head")

    if hrp and head then
        local hrpPos, hrpVis = workspace.CurrentCamera.WorldToViewportPoint(workspace.CurrentCamera, hrp.Position)
        local headPos =
            workspace.CurrentCamera.WorldToViewportPoint(workspace.CurrentCamera, head.Position + headOffset)
        local legPos = workspace.CurrentCamera.WorldToViewportPoint(workspace.CurrentCamera, hrp.Position - legOffset)
        local Vis =
            (mt.teamCheck and plr.TeamColor ~= game:GetService("Players").LocalPlayer.TeamColor) or (not mt.teamCheck)

        if hrpVis then
            boxEsp.Size = Vector2.new(2350 / hrpPos.Z, headPos.Y - legPos.Y)
            local boxEspSize = boxEsp.Size
            boxEsp.Position = Vector2.new(hrpPos.X - boxEspSize.X / 2, hrpPos.Y - boxEspSize.Y / 2)
            boxEsp.Color = espColor
            Tracer.To = Vector2.new(hrpPos.X, hrpPos.Y - boxEspSize.Y / 2)
            Tracer.Color = espColor
            name.Position = Vector2.new(hrpPos.X, (hrpPos.Y + boxEspSize.Y / 2) - 25)
            name.Text = text
            name.Color = espColor

            boxEsp.Visible = boxEspVisible and Vis
            Tracer.Visible = TracerVisible and Vis
            name.Visible = Vis
        else
            boxEsp.Visible = false
            Tracer.Visible = false
            name.Visible = false
        end
    end
end

function KrakenLib:remove()
    mt.boxEsp[1]:rmvtb()
    mt.Tracer[1]:rmvtb()
    mt.name[1]:rmvtb()
    function mt:upd()
    end
end

return KrakenLib
